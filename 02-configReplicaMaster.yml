- hosts: Master
  vars_files:
    - varsInstallPostgres13.yml
  vars:
     contents: "{{ lookup('file', '/home/administrator/ansible/instalacionPostgres13Ubuntu/repmgr.conf') }}"
  tasks:

    - name: Crear partición para PGDATA
      become: yes
      parted:
        device: /dev/"{{partition_pgdata}}"
        number: 1
        state: present

    - name: Create a ext4 filesystem on /dev/"{{partition_pgdata}}"
      become: yes
      filesystem:
        fstype: ext4
        dev: /dev/{{partition_pgdata}}1

    - name: Create path PGDATA
      become: yes
      command: mkdir -p "{{path_pgdata}}"

    - name: Mount up PGDATA
      become: yes
      mount:
        path: "{{path_pgdata}}"
        src: /dev/{{partition_pgdata}}1
        fstype: ext4
        state: mounted

    - name: Crear partición para archivelog
      become: yes
      parted:
        device: /dev/"{{partition_wal}}"
        number: 1
        state: present

    - name: Create a ext4 filesystem on /dev/"{{partition_wal}}"
      become: yes
      filesystem:
        fstype: ext4
        dev: /dev/{{partition_wal}}1

    - name: Crear directorio de almacenamiento para archivelog
      become: yes
      file:
        path: "{{wal_directory}}"
        state: directory

    - name: Mount up wal_directory
      become: yes
      mount:
        path: "{{wal_directory}}"
        src: /dev/{{partition_wal}}1
        fstype: ext4
        state: mounted

    - name: Detener postgresql
      become: yes
      service:
        name: postgresql
        enabled: no
        state: stopped

    - name: Change PGDATA directoty permission
      become: yes
      file:
        path: "{{path_pgdata}}"
        recurse: yes
        owner: postgres
        group: postgres

    - name: Change wal_directory permission
      become: yes
      file:
        path: "{{wal_directory}}"
        recurse: yes
        owner: postgres
        group: postgres

    - name: Create basebackup directory
      become: yes
      become_user: postgres
      file:
        path: "{{path_pgdata}}/basebackup"
        state: directory

    - name: Iniciar Cluster
      become: yes
      become_user: postgres
      command: "/usr/lib/postgresql/13/bin/initdb -D {{path_pgdata}}/{{cluster_name}}/{{cluster_data}} -A trust"

    - name: Start Cluster
      become: yes
      become_user: postgres
      command: "/usr/lib/postgresql/13/bin/pg_ctl -D {{path_pgdata}}/{{cluster_name}}/{{cluster_data}} -l {{path_pgdata}}/{{cluster_name}}.log start"

    - name: Get configuration wal_level
      become: yes
      become_user: postgres
      command: psql -c "show wal_level; "
      register: postgres_config
      changed_when: false

    - debug:
        var: postgres_config
        verbosity:  1

    - name: Set configuration wal_level
      become: yes
      become_user: postgres
      command:  psql -c "alter system set wal_level= replica;"
      when: postgres_config.stdout_lines[2] != "replica"

    - name: Get configuration max_wal_senders
      become: yes
      become_user: postgres
      command: psql -c "show max_wal_senders; "
      register: postgres_config
      changed_when: false

    - debug:
        var: postgres_config
        verbosity:  1

    - name: Set configuration max_wal_senders
      become: yes
      become_user: postgres
      command:  psql -c "alter system set max_wal_senders= 10;"
      when: postgres_config.stdout_lines[2] < "10"

    - name: Get configuration hot_standby
      become: yes
      become_user: postgres
      command: psql -c "show hot_standby; "
      register: postgres_config
      changed_when: false

    - debug:
        var: postgres_config
        verbosity:  1

    - name: Set configuration hot_standby
      become: yes
      become_user: postgres
      command:  psql -c "alter system set hot_standby= on;"
      when: postgres_config.stdout_lines[2] != "on"

    - name: Create user replicador
      become: yes
      become_user: postgres
      command: psql -c "create user replicador with replication password '{{passwd_replicador}}';"

    - name: Create user repmgr
      become: yes
      become_user: postgres
      command: psql -c "create user repmgr WITH CREATEDB CREATEROLE SUPERUSER PASSWORD '{{passwd_repmgr}}';"

    - name: Create db repmgr
      become: yes
      become_user: postgres
      command: psql -c "create database repmgr owner repmgr;"
    
    - name: Update postgresql.conf
      become: yes
      become_user: postgres
      blockinfile:
        path: "{{path_pgdata}}/{{cluster_name}}/{{cluster_data}}/postgresql.conf"
        block: |
          listen_addresses = '*'
          wal_level = replica
          archive_mode = on                           
          archive_command = 'test ! -f {{wal_directory}}/%f && cp %p {{wal_directory}}/%f'
          max_wal_senders = 10
          shared_preload_libraries = 'repmgr,pgaudit'
          cluster_name = '{{cluster_name}}'
          pgaudit.log = 'all, -misc'
          log_line_prefix = '<%m:%r:%u@%d:[%p]:> '
          log_statement = 'none'

    - name: Update pg_hba.conf
      become: yes
      become_user: postgres
      blockinfile:
        path: "{{path_pgdata}}/{{cluster_name}}/{{cluster_data}}/pg_hba.conf"
        block: |
          host    replication     replicador      0.0.0.0/0               trust
          local   repmgr          repmgr                                  trust
          host    repmgr          repmgr          0.0.0.0/0               trust
          local   replication     repmgr                                  trust
          host    replication     repmgr          0.0.0.0/0               trust          
          host    replication     all             127.0.0.1/32            ident
          host    replication     all             ::1/128                 ident

    - name: Create repmgr.conf step 1
      become: yes
      become_user: postgres
      file:
        path: "{{path_pgdata}}/repmgr.conf"
        state: touch
        mode: u=rw,g=rw,o=r

    - name: Create repmgr.conf step 2
      become: yes
      become_user: postgres
      blockinfile:
        path: "{{path_pgdata}}/repmgr.conf"
        block: |
          {{ contents }}
          node_id=1
          node_name='{{hostname_nodo1}}'
          conninfo='host={{ip_nodo1}} port=5432 dbname=repmgr user=repmgr'
          data_directory='{{path_pgdata}}/{{cluster_name}}/{{cluster_data}}'
          primary_follow_timeout=10
          failover='automatic'
          promote_command='repmgr standby promote -f {{path_pgdata}}/repmgr.conf'
          follow_command='repmgr standby follow -f {{path_pgdata}}/repmgr.conf -W --upstream-node-id=2'
          log_file='{{path_pgdata}}/repmgrd.log'

    - name: Restart Cluster
      become: yes
      become_user: postgres
      command: "/usr/lib/postgresql/13/bin/pg_ctl -D {{path_pgdata}}/{{cluster_name}}/{{cluster_data}} -l {{path_pgdata}}/{{cluster_name}}.log restart"

    - name: Create extension PgAudit
      become: yes
      become_user: postgres
      command: psql -c "CREATE EXTENSION pgaudit;"

    - name: Change postgres password
      become: yes
      become_user: postgres
      command: psql -c "alter user postgres with password '{{passwd_replicador}}';"

    - name: Create basebackup
      become: yes
      become_user: postgres
      command: "pg_basebackup -h {{ip_nodo1}} -U replicador -p 5432 -D {{path_pgdata}}/basebackup -Fp -Xs -P -R"


